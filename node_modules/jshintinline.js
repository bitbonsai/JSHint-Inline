/*
 * Copyright (c) 2013 Mauricio Wolff
 * http://bitbonsai.mit-license.org/
 */
/* globals console, process, require, __dirname */

module.exports = function (file) {
    'use strict';

    var fs = require('fs'),
        jshint = require('jshint').JSHINT,

        buffer = '',
        curfile = file || process.argv[2],
        html,
        jsh_counter = 0,
        jsh_errors = [],
        line,
        match,
        options = { "browser": true, "globalstrict": true, "smarttabs": true, "debug": true, "strict": true, "unused": true, "undef": true, "curly": true },
        re = /<script\b[^>]*>([\s\S]*?)<\/script>/gm,
        script_lines = [],
        script_tags = 0;

    function errorLog (msg) {
        console.log('✗ ' + msg);
        return;
    };

    if (!curfile) {
        errorLog('File needs to be saved before you can use JSHint-Inline.');
    }

    html = fs.readFileSync(curfile, null).toString() || false;

    if (!html) {
        errorLog("Couldn't get any content from this file... File: " + curfile);
    }

    html.split('\n').forEach(function (str, i) {
        if (str.indexOf('<script') > -1) {
            script_lines.push(i);
        }
    });

    buffer += '[JSHint Inline: ' + curfile + ']\n\n';

    while (match = re.exec(html)){
        script_tags++;
        var source = match[1];

        try {
            jshint(source, options);
        } catch(e) {}

        if (jshint.errors) {
            jshint.errors.forEach(function(e) {
                var code;

                // if the error is null, then we could not continue (too many errors)
                if (e === null) {
                  errorLog('Stopping, unable to continue. Too many errors.');
                }

                // do some formatting if the error data is available
                if ("undefined" !== typeof e.raw) {
                    code = ' (' + e.code + ')';
                    line = e.line + script_lines[jsh_counter] - 1;
                    
                    jsh_errors.push('  ' + line + ',' + e.character + ': ' + e.reason + code);
                }
            });
        }
        jsh_counter++;
    }

    if (script_tags === 0) {
        errorLog('Stopping, unable to continue. This file does not have any <script> tag.');
    }

    if (!jsh_errors.length) {
        buffer += '✓ JSHint PASSED! 0 errors, [esc] to hide.\n';
        
        console.log(buffer);
        return true;
    } else {
        var plural = (jsh_counter > 1) ? 's' : '';
        buffer += jsh_errors.join('\n');
        buffer += '\n\n';
        buffer += '✗ JSHint FAILED\n  ' + jsh_counter + ' warning'+ plural +'/error' + plural + ' detected.\n';
        buffer +=  '\n';

        console.log(buffer);
        return false;
    }
    
}