/*
 * Copyright (c) 2013 Mauricio Wolff
 * http://bitbonsai.mit-license.org/
 */

 /* jshint -W084 */
/* globals console, process, require, __dirname */

module.exports = function (file) {
    'use strict';

    var fs = require('fs'),
        jshint = require('jshint').JSHINT,
        curfile = file || process.argv[2],
        buffer = '[JSHint Inline: ' + curfile + ']\n\n',
        html,
        output = { "e": {}, "w": {} },
        output_counter = { "e": 0, "w": 0 },
        line,
        match,
        options = { "browser": true, "globalstrict": true, "smarttabs": true, "debug": true, "strict": true, "unused": true, "undef": true, "curly": true },
        re = /<script\b[^>]*>([\s\S]*?)<\/script>/gm,
        script_line = [],
        scripts = [];

    function errorLog (msg) {
        console.log('✗ ' + msg);
        process.exit(0);
    }

    function formatOutput (obj) {
        var e = obj.e,
            w = obj.w,
            ret = '',
            titles = { "e": "Error", "w": "Warning" },
            s,
            keys;

        for (var i in obj) {
            keys = Object.keys(obj[i]);

            if (keys.length > 0) {
                s = (keys.length > 1) ? 's' : '';
                
                ret += '  ' + keys.length + ' ' + titles[i] + s + ':\n';

                for (var j in obj[i]) {
                    ret += '  ' + obj[i][j] + '\n';
                }
                ret += '\n';
            }
        }

        return ret;
    }

    try {
        html = fs.readFileSync(curfile, null).toString();
    } catch (e) {
        if (e.code === 'ENOENT') {
            errorLog("Couldn't find any html or file to parse...");
        } else {
            errorLog("There was an error getting the html to parse. Can't continue...\n  Error Code: " + e.code);
        }
    }

    // get the script tag lines, to add the line count when showing errors
    html.split('\n').forEach(function (str, i) {
        if (str.indexOf('<script') > -1) {
            script_line.push(i);
        }
    });

    // get all script tag contents
    while (match = re.exec(html)){
        scripts.push(match[1]);
    }

    if (scripts.length < 1) {
        errorLog('This file does not have any <script> tag, nothing to JSHint.');
    }

    scripts.forEach(function (s, idx) {

        try {
            jshint(s, options);

            if (jshint.errors) {
                jshint.errors.forEach(function (e) {
                    var code,
                        error_warning;

                    // if e == null, means too many errors.
                    if (e === null) {
                        errorLog('Stopping, unable to continue. Too many errors.');
                    }

                    // format found errors
                    if (e.raw) {
                        code = ' (' + e.code + ')';
                        error_warning = e.code.match(/[\D]+/)[0].toLowerCase();
                        output_counter[error_warning]++;
                        line = e.line + script_line[idx];

                        output[error_warning][line] = ('  ' + line + ',' + e.character + ': ' + e.reason + code);
                    }
                });
            }
        } catch (e) {}
    });

    if (Object.keys(output.e).length === 0 && Object.keys(output.w).length === 0) {
        buffer += '✓ JSHint PASSED! 0 errors, [esc] to hide.\n';        
        
        console.log(buffer);
        return true;
    
    } else {
    
        buffer += '✗ JSHint FAILED!\n';
        buffer += formatOutput(output);
        
        console.log(buffer);
        return false;
    }
};